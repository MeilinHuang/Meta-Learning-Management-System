{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Meta LMS CRUD",
    "description": "Meta LMS API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:8000",
  "basePath": "/",
  "tags": [
    {
      "name": "Authentication",
      "description": "API for authentication"
    },
    {
      "name": "User",
      "description": "API for users"
    },
    {
      "name": "Topic Tree",
      "description": "API for Topic Tree feature"
    },
    {
      "name": "Forums",
      "description": "API for Forums feature"
    },
    {
      "name": "Course Pages",
      "description": "API for Course Pages feature"
    },
    {
      "name": "Gamification",
      "description": "API for Gamification feature"
    },
    {
      "name": "Assessment",
      "description": "API for Assessment feature"
    },
    {
      "name": "Lectures and Tutorials",
      "description": "API for Lectures and Tutorials feature"
    }
  ],
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/quiz": {
      "post": {
        "tags": ["Assessment"],
        "summary": "Create new quiz",
        "parameters": [
          {
            "name": "quizBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostQuiz"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/quiz/{quizId}": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get quiz containing questions from specified quiz id",
        "parameters": [
          {
            "name": "quizId",
            "required": true,
            "type": "integer",
            "description": "Id of quiz we want to get",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetQuizQuestions"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "put": {
        "tags": ["Assessment"],
        "summary": "Update quiz details from quiz id",
        "parameters": [
          {
            "name": "quizId",
            "required": true,
            "type": "integer",
            "description": "Id of quiz",
            "in": "path"
          },
          {
            "name": "quizBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Quiz"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Assessment"],
        "summary": "Delete quiz",
        "parameters": [
          {
            "name": "quizId",
            "required": true,
            "type": "integer",
            "description": "Id of quiz we want to delete",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/quiz/{quizId}/question/{questionId}": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get specific question from specified quiz",
        "parameters": [
          {
            "name": "quizId",
            "required": true,
            "type": "integer",
            "description": "Id of quiz we want to get",
            "in": "path"
          },
          {
            "name": "questionId",
            "required": true,
            "type": "integer",
            "description": "Id of question we want",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QuizQuestion"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "put": {
        "tags": ["Assessment"],
        "summary": "Update question details from quiz id",
        "parameters": [
          {
            "name": "quizId",
            "required": true,
            "type": "string",
            "description": "Id of quiz we want to get",
            "in": "path"
          },
          {
            "name": "questionId",
            "required": true,
            "type": "integer",
            "description": "Id of question we want",
            "in": "path"
          },
          {
            "name": "questionBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PutQuizQuestion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },  
    "/questionBank/{questionBankId}": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get list of questions with matching question bank id",
        "parameters": [
          {
            "name": "questionBankId",
            "required": true,
            "type": "integer",
            "description": "Question bank Id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetQuestionBankQuestions"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "put": {
        "tags": ["Assessment"],
        "summary": "Update name of question bank",
        "parameters": [
          {
            "name": "questionBankId",
            "required": true,
            "type": "integer",
            "description": "Question bank Id",
            "in": "path"
          },
          {
            "name": "questionBankName",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PutQuestionBank"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Assessment"],
        "summary": "Delete question bank",
        "parameters": [
          {
            "name": "questionBankId",
            "required": true,
            "type": "integer",
            "description": "Question bank Id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/questionBank": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get list questions from question banks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetQuestionBankQuestions"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/questionBank/question/{questionId}": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get question from question bank with specified question id",
        "parameters": [
          {
            "name": "questionId",
            "required": true,
            "type": "integer",
            "description": "Id of question we want",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QuizQuestion"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/poll": {
      "post": {
        "tags": ["Assessment"],
        "summary": "Create new poll",
        "parameters": [
          {
            "name": "pollBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostPoll"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/poll/{pollId}": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get poll from specified poll id",
        "parameters": [
          {
            "name": "pollId",
            "type": "integer",
            "required": true,
            "in": "path",
            "description": "Id of poll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Poll"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "put": {
        "tags": ["Assessment"],
        "summary": "Change data of poll",
        "parameters": [
          {
            "name": "pollId",
            "required": true,
            "type": "integer",
            "description": "Id of poll we want",
            "in": "path"
          },
          {
            "name": "pollBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostPoll"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Assessment"],
        "summary": "Delete Poll",
        "parameters": [
          {
            "name": "pollId",
            "required": true,
            "type": "integer",
            "description": "Id of poll we want",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/quiz/studentAnswers/student/{studentId}": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get list of student_answer matching the student ID",
        "parameters": [
          {
            "name": "studentId",
            "required": true,
            "type": "integer",
            "description": "Id of student we want",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetStudentAnswer"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/quiz/results/question/{questionId}/answerCount": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get number of students that selected each answer for a question",
        "parameters": [
          {
            "name": "questionId",
            "required": true,
            "type": "integer",
            "description": "Id of question we want",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAnswerCount"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/questionBank/{questionBankId}/question": {
      "post": {
        "tags": ["Assessment"],
        "summary": "Create new question for question bank",
        "parameters": [
          {
            "name": "questionBankId",
            "required": true,
            "type": "integer",
            "description": "Id of questionBank we want",
            "in": "path"
          },
          {
            "name": "questionBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostQuizQuestion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/quiz_question_answer": {
      "post": {
        "tags": ["Assessment"],
        "summary": "Create new quiz question answer",
        "parameters": [
          {
            "name": "quizQuestionAnswerBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostQuizQuestionAnswer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/student_answer": {
      "post": {
        "tags": ["Assessment"],
        "summary": "Create new student answer",
        "parameters": [
          {
            "name": "studentAnswerBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/QuizStudentAnswer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/quiz/{quizId}/question/{questionId}/answer/{quizQuestionAnswerId}": {
      "put": {
        "tags": ["Assessment"],
        "summary": "Update quiz question answer",
        "parameters": [
          {
            "name": "quizId",
            "required": true,
            "type": "integer",
            "description": "Id of quiz we want",
            "in": "path"
          },
          {
            "name": "questionId",
            "required": true,
            "type": "integer",
            "description": "Id of question we want",
            "in": "path"
          },
          {
            "name": "quizQuestionAnswerId",
            "required": true,
            "type": "integer",
            "description": "Id of quiz question answer we want",
            "in": "path"
          },
          {
            "name": "quizQuestionAnswerBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PutQuizQuestionAnswer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/question/{questionId}/delete": {
      "delete": {
        "tags": ["Assessment"],
        "summary": "Delete question from id",
        "parameters": [
          {
            "name": "questionId",
            "required": true,
            "type": "integer",
            "description": "Id of question",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/questionBank/{questionBankId}/question/{questionId}": {
      "delete": {
        "tags": ["Assessment"],
        "summary": "Delete question from question bank",
        "parameters": [
          {
            "name": "questionBankId",
            "required": true,
            "type": "integer",
            "description": "Id of questionBank we want",
            "in": "path"
          },
          {
            "name": "questionId",
            "required": true,
            "type": "integer",
            "description": "Id of question",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/questions": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get all gamification questions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllQuestions"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/questions/new": {
      "post": {
        "tags": ["Gamification"],
        "summary": "Create new question",
        "parameters": [
          {
            "name": "questionBody",
            "in": "body",
            "description": "New question body",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/questions/{questionId}": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get all level data from question id",
        "parameters": [
          {
            "name": "questionId",
            "type": "integer",
            "in": "path",
            "required": true,
            "description": "Id of question to get level data from"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Level"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "put": {
        "tags": ["Gamification"],
        "summary": "Edit existing question data",
        "parameters": [
          {
            "name": "questionId",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Id of question to edit"
          },
          {
            "name": "editQuestion",
            "in": "body",
            "description": "Details of updated question",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Gamification"],
        "summary": "Delete question from question id",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "description": "Id of question to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/levels": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get all gamification levels",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllLevels"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/levels/{levelId}": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get level data for specified level id",
        "parameters": [
          {
            "name": "levelId",
            "type": "integer",
            "required": true,
            "in": "path",
            "description": "Id of level we want data for"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Level"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "put": {
        "tags": ["Gamification"],
        "summary": "Edit existing level data",
        "parameters": [
          {
            "name": "levelId",
            "type": "integer",
            "required": true,
            "in": "path",
            "description": "Id of level"
          },
          {
            "name": "editLevel",
            "in": "body",
            "description": "Details of updated level",
            "schema": {
              "$ref": "#/definitions/PutLevel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Level"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Gamification"],
        "summary": "Delete level from level id",
        "parameters": [
          {
            "name": "levelId",
            "in": "path",
            "required": true,
            "description": "Id of level we want to delete",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/levels/new": {
      "post": {
        "tags": ["Gamification"],
        "summary": "Create new level",
        "parameters": [
          {
            "name": "levelBody",
            "in": "body",
            "description": "New level body",
            "schema": {
              "$ref": "#/definitions/PostLevel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/{level}/questions": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get all questions linked to level",
        "parameters": [
          {
            "name": "level",
            "in": "path",
            "description": "Name of level to get questions for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllQuestions"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logs in the user",
        "parameters": [
          {
            "name": "loginBody",
            "in": "body",
            "description": "Login body",
            "schema": {
              "$ref": "#/definitions/LoginBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": ["User"],
        "summary": "Get user from id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of user we want",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user from id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of user we want",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/user/{userId}/{topicGroupId}": {
      "post": {
        "tags": ["User"],
        "summary": "Make user an admin for a topic group",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of user we want to make an admin",
            "type": "integer"
          },
          {
            "name": "topicGroupId",
            "in": "path",
            "required": true,
            "description": "Id of topic group to make admin for",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete admin user from id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of user we want",
            "type": "integer"
          },
          {
            "name": "topicGroupId",
            "in": "path",
            "required": true,
            "description": "Id of topic group to make admin for",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/{topicGroup}/announcement": {
      "get": {
        "tags": ["Course Pages"],
        "summary": "Get all announcements",
        "parameters": [
          {
            "name": "topicGroup",
            "description": "Name of topic group to get announcements",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllAnnouncements"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/{topicGroup}/announcement/new": {
      "post": {
        "tags": ["Course Pages"],
        "summary": "Create new announcement",
        "parameters": [
          {
            "name": "topicGroup",
            "description": "Name of topic Group",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "announcementBody",
            "in": "body",
            "description": "Announcement body",
            "schema": {
              "$ref": "#/definitions/PostAnnouncement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/{topicGroup}/announcement/comment": {
      "post": {
        "tags": ["Course Pages"],
        "summary": "Create new announcement comment",
        "parameters": [
          {
            "name": "topicGroup",
            "description": "Name of topic Group to create announcement for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentBody",
            "in": "body",
            "description": "Comment body",
            "schema": {
              "$ref": "#/definitions/PostAnnouncementComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum": {
      "get": {
        "tags": ["Forums"],
        "summary": "Get all forum posts",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllForumPosts"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/pinned": {
      "get": {
        "tags": ["Forums"],
        "summary": "Get all pinned forum posts",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllForumPosts"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/search/{forumSearchTerm}": {
      "get": {
        "tags": ["Forums"],
        "summary": "Get all forum posts related to the search query",
        "parameters": [
          {
            "name": "forumSearchTerm",
            "in": "path",
            "required": true,
            "description": "Search term to include all posts with the search term",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllForumPosts"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/{forumFilterTerm}": {
      "get": {
        "tags": ["Forums"],
        "summary": "Get all forum posts related to the filter term",
        "parameters": [
          {
            "name": "forumFilterTerm",
            "in": "path",
            "required": true,
            "description": "Filter term to include all posts with the filter term",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllForumPosts"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/post": {
      "post": {
        "tags": ["Forums"],
        "summary": "Make new post",
        "parameters": [
          {
            "name": "New forum post",
            "in": "body",
            "description": "New post",
            "schema": {
              "$ref": "#/definitions/PostForum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostForum"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/post/{postId}": {
      "get": {
        "tags": ["Forums"],
        "summary": "Get post details of post associated with post id",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "Id of post we want details for",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForumPost"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "put": {
        "tags": ["Forums"],
        "summary": "Edit post details with post id",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "Id of post we want to edit",
            "type": "string"
          },
          {
            "name": "editPost",
            "in": "body",
            "description": "Details of updated post",
            "schema": {
              "$ref": "#/definitions/PutForumPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForumPost"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Forums"],
        "summary": "Delete forum post by id",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "Id of post we want to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/post/{postId}/reply": {
      "post": {
        "tags": ["Forums"],
        "summary": "Create a reply on post by postId",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "Id of post we want to reply to",
            "type": "string"
          },
          {
            "name": "replyDetails",
            "in": "body",
            "description": "Details of post reply",
            "schema": {
              "$ref": "#/definitions/PostReply"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/post/{postId}/reply/{replyId}": {
      "put": {
        "tags": ["Forums"],
        "summary": "Update reply on a post with id",
        "parameters": [
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "description": "Id of reply we want to update",
            "type": "integer"
          },
          {
            "name": "postId",
            "in": "path",
            "required": false,
            "description": "Id of post",
            "type": "integer"
          },
          {
            "name": "replyDetails",
            "in": "body",
            "description": "Details of updated post reply",
            "schema": {
              "$ref": "#/definitions/PutReply"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Forums"],
        "summary": "Delete forum post reply",
        "parameters": [
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "description": "Id of reply we want to delete",
            "type": "integer"
          },
          {
            "name": "postId",
            "in": "path",
            "required": false,
            "description": "Id of post",
            "type": "integer"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "schema": { "$ref": "#/definitions/400" }
          },
          "403": { "schema": { "$ref": "#/definitions/403" } }
        }
      }
    },
    "/forum/post/{postId}/comment": {
      "post": {
        "tags": ["Forums"],
        "summary": "Create comment on post",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "Id of post we want to comment to",
            "type": "integer"
          },
          {
            "name": "commentDetails",
            "in": "body",
            "description": "Details of comment body",
            "schema": {
              "$ref": "#/definitions/PostComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/post/{postId}/comment/{commentId}": {
      "put": {
        "tags": ["Forums"],
        "summary": "Updates post comment",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": false,
            "description": "Id of post",
            "type": "integer"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "Id of comment",
            "type": "integer"
          },
          {
            "name": "commentBody",
            "in": "body",
            "required": true,
            "description": "Id of comment",
            "schema": {
              "$ref": "#/definitions/PutComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Forums"],
        "summary": "Deletes forum comment",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": false,
            "description": "Id of post",
            "type": "integer"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "Id of comment",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/post/pin/{postId}/{isPinned}": {
      "put": {
        "tags": ["Forums"],
        "summary": "Pins or unpins post associated with post id",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "Id of post we want to pin/unpin",
            "type": "integer"
          },
          {
            "name": "isPinned",
            "in": "path",
            "required": true,
            "description": "Set pinned to true or false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/tags": {
      "put": {
        "tags": ["Forums"],
        "summary": "Get list of all tags",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllForumTags"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "post": {
        "tags": ["Forums"],
        "summary": "Create new tag",
        "parameters": [
          {
            "name": "tagName",
            "in": "body",
            "description": "Body with tag name",
            "schema": {
              "$ref": "#/definitions/ForumTag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/forum/tags/{tagId}": {
      "put": {
        "tags": ["Forums"],
        "summary": "Update forum tag",
        "parameters": [
          {
            "name": "tagId",
            "type": "integer",
            "required": true,
            "description": "Id of tag",
            "in": "path"
          },
          {
            "name": "tagBody",
            "required": true,
            "description": "Id of tag",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Forumtag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Forums"],
        "summary": "Delete forum tag",
        "parameters": [
          {
            "name": "tagId",
            "type": "integer",
            "required": true,
            "description": "Id of tag",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/{topicGroup}/remove-level/{level}": {
      "delete": {
        "tags": ["Gamification"],
        "summary": "Delete level from topic group",
        "parameters": [
          {
            "name": "topicGroup",
            "type": "string",
            "required": true,
            "description": "name of topic group",
            "in": "path"
          },
          {
            "name": "level",
            "type": "string",
            "required": true,
            "description": "Name of level we want to remove from topic group",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/topicGroup/{topicGroupId}/newLevel": {
      "post": {
        "tags": ["Gamification"],
        "summary": "Create a new level for topic group",
        "parameters": [
          {
            "name": "topicGroupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "Id of topic group we want to add new level to"
          },
          {
            "name": "levelBody",
            "in": "body",
            "description": "New level body",
            "schema": {
              "$ref": "#/definitions/Level"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/topicGroup/{topicGroupId}/levels": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get a list of levels for provided topic group",
        "parameters": [
          {
            "name": "topicGroupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "Id of topic group"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllLevels"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/topicGroup": {
      "get": {
        "tags": ["Topic Tree"],
        "summary": "Get a list of topic groups, their information (tutorial times, course outline) and the Topic they contain",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllTopicGroups"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/topicGroup/{topicGroupName}/topic": {
      "get": {
        "tags": ["Topic Tree"],
        "summary": "Get list of Topics",
        "parameters": [
          {
            "name": "topicGroupName",
            "in": "path",
            "required": true,
            "description": "Gets topics from topic group name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllTopics"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/topicGroup/{topicGroupName}/topic/{topicName}/prerequisite": {
      "get": {
        "tags": ["Topic Tree"],
        "summary": "Get prerequisites of topic",
        "parameters": [
          {
            "name": "topicGroupName",
            "in": "path",
            "required": true,
            "description": "Name of topic group we want topics for",
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "required": true,
            "description": "Name of topic we want pre-requisites for",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPreRequisites"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "post": {
        "tags": ["Topic Tree"],
        "summary": "Create a new prerequisite with prerequisite in POST body",
        "parameters": [
          {
            "name": "topicGroupName",
            "in": "path",
            "required": true,
            "description": "Name of topic group we want topics for",
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "required": true,
            "description": "Name of topic we want pre-requisites for",
            "type": "string"
          },
          {
            "name": "Pre-Requisite",
            "in": "body",
            "description": "Topic with new pre-requisite(s)",
            "schema": {
              "$ref": "#/definitions/PreRequisite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Topic Tree"],
        "summary": "Delete prerequisites",
        "parameters": [
          {
            "name": "topicGroupName",
            "in": "path",
            "required": true,
            "description": "Name of topic group we want topics for",
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "required": true,
            "description": "Name of topic we want pre-requisites to delete for",
            "type": "string"
          },
          {
            "name": "Pre-Requisite",
            "in": "body",
            "description": "PreRequisite delete body",
            "schema": {
              "$ref": "#/definitions/PreRequisite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/topicGroup/{topicGroupName}": {
      "post": {
        "tags": ["Topic Tree"],
        "summary": "Create a topic group",
        "parameters": [
          {
            "name": "topicGroupName",
            "in": "path",
            "required": true,
            "description": "Name of topic group",
            "type": "string"
          },
          {
            "name": "TopicGroup",
            "in": "body",
            "description": "New Topic Group",
            "schema": {
              "$ref": "#/definitions/TopicGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Topic Tree"],
        "summary": "Delete a topic group",
        "parameters": [
          {
            "name": "topicGroupName",
            "in": "path",
            "required": true,
            "description": "Name of topic group we want to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    },
    "/topicGroup/{topicGroupName}/topic/{topicName}": {
      "post": {
        "tags": ["Topic Tree"],
        "summary": "Create a new topic",
        "parameters": [
          {
            "name": "topicGroupName",
            "in": "path",
            "required": true,
            "description": "Name of topic group",
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "required": true,
            "description": "Name of new topic",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      },
      "delete": {
        "tags": ["Topic Tree"],
        "summary": "Delete a topic",
        "parameters": [
          {
            "name": "topicGroupName",
            "in": "path",
            "required": true,
            "description": "Name of topic group",
            "type": "string"
          },
          {
            "name": "topicName",
            "in": "path",
            "required": true,
            "description": "Name of new topic",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "400": {
            "schema": { 
              "$ref": "#/definitions/400"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/403"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Poll": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Poll 1"
        },
        "start_time": {
          "type": "dateTime",
          "example": "2016-06-22 19:10:25-07"
        },
        "close_time": {
          "type": "dateTime",
          "example": "2016-06-22 19:10:25-07"
        },
        "is_closed": {
          "type": "boolean",
          "example": false
        },
        "poll_type": {
          "type": "string",
          "example": "Type A"
        }
      }
    },
    "PostPoll": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Poll 1"
        },
        "start_time": {
          "type": "dateTime",
          "example": "2016-06-22 19:10:25-07"
        },
        "close_time": {
          "type": "dateTime",
          "example": "2016-06-22 19:10:25-07"
        },
        "is_closed": {
          "type": "boolean",
          "example": false
        },
        "poll_type": {
          "type": "string",
          "example": "Type A"
        }
      }
    },
    "PutQuestionBank": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Algorithms Question Bank"
        }
      }
    },
    "PutQuizQuestion": {
      "properties": {
        "quiz_type": {
          "type": "string",
          "example": "mpc | sa | la"
        },
        "marks_awarded": {
          "type": "float",
          "example": 1
        },
        "description": {
          "type": "string",
          "example": "What is 2 + 2?"
        },
        "related_topic_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "PostQuizQuestion": {
      "properties": {
        "quiz_id": {
          "type": "integer",
          "example": 1
        },
        "quiz_type": {
          "type": "string",
          "example": "mpc | sa | la"
        },
        "marks_awarded": {
          "type": "float",
          "example": 1
        },
        "description": {
          "type": "string",
          "example": "What is 2 + 2?"
        },
        "related_topic_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "GetQuizQuestions": {
      "properties": {
        "quiz": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 0
              },
              "name": {
                "type": "string",
                "example": "Question 1"
              },
              "dueDate": {
                "type": "dateTime",
                "example": "2016-06-22 19:10:25-07"
              },
              "timeGiven": {
                "type": "integer",
                "example": 40
              }
            }
          }
        }
      }
    },
    "PostLevel": {
      "properties": {
        "title": {
          "type": "string",
          "example": "Level"
        },
        "topicGroupId": {
          "type": "integer",
          "uniqueItems": true
        },
        "levelType": {
          "type": "string"
        },
        "availableFrom": {
          "type": "dateTime",
          "example":"2016-06-22 19:10:25-07"
        },
        "questionNumbers": {
          "type": "integer",
          "example": 3
        },
        "estimatedTimeRequired": {
          "type": "integer",
          "example": 15
        }
      }
    },
    "PostAnnouncement": {
      "properties": {
        "author": {
          "type": "integer",
          "example": 3
        },
        "title": {
          "type": "string",
          "example": "First announcement"
        },
        "content": {
          "type": "string",
          "example": "Description of the first announcement"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "file",
            "example": "announcement.img"
          }
        },
        "postDate": {
          "type": "dateTime",
          "example":"2016-06-22 19:10:25-07"
        }
      }
    },
    "PostAnnouncementComment": {
      "properties": {
        "announcementId": {
          "type": "integer",
          "example": 1
        },
        "author": {
          "type": "integer",
          "example": 1
        },
        "content": {
          "type": "string",
          "example": "New announcement comment incoming"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "file",
            "example": "image.png"
          }
        },
        "postDate": {
          "type": "dateTime",
          "example":"2016-06-22 19:10:25-07"
        }
      }
    },
    "Announcement": {
      "properties": {
        "announcementId": {
          "type": "integer",
          "uniqueItems": true
        },
        "author": {
          "type": "string",
          "example": "Mark Saylor"
        },
        "postDate": {
          "type": "dateTime",
          "example":"Wed Jun 30 2016 08:20:15"
        },
        "description": {
          "type": "string",
          "example": "All tutorials will be online"
        },
        "externalFiles": {
          "type": "file",
          "example": "dog.img"
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "commentId": {
                "type": "integer",
                "uniqueItems": true
              },
              "author": {
                "type": "string",
                "example": "Harold Jenkins"
              },
              "publishedDate": {
                "type": "dateTime",
                "example": "Wed Mar 25 2015 11:56:34"
              },
              "comment": {
                "type": "string",
                "example": "Awesome"
              }
            }
          }
        }
      }
    },
    "ForumTag": {
      "properties": {
        "tagName": {
          "type": "string",
          "example": "FinalExam"
        }
      }
    },
    "PutForumPost": {
      "properties": {
        "description": {
          "type": "string",
          "example": "Some new description"
        }
      }
    },
    "ForumPost": {
      "properties": {
        "_id": {
          "type": "integer",
          "uniqueItems": true
        },
        "title": {
          "type": "string",
          "example": "How to start Assignment 1"
        },
        "author": {
          "type": "string",
          "example": "John Smith"
        },
        "publishedDate": {
          "type": "dateTime",
          "example": "Wed Mar 25 2015 11:00:00"
        },
        "description": {
          "type": "string",
          "example": "Lorem ipsum ipsum ipsum ipsum ipsum"
        },
        "isPinned": {
          "type": "boolean",
          "example": true
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "name": {
                "type": "string",
                "example": "Ass1"
              }
            }
          }
        },
        "replies": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "author": {
                "type": "string",
                "example": "Jessica Smith"
              },
              "publishedDate": {
                "type": "dateTime",
                "example": "Wed Mar 25 2015 11:23:05"
              },
              "reply": {
                "type": "string",
                "example": "Lorem lorem lorem lorem lorem lorem lorem"
              }
            }
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "author": {
                "type": "string",
                "example": "Harold Jenkins"
              },
              "publishedDate": {
                "type": "dateTime",
                "example": "Wed Mar 25 2015 11:56:34"
              },
              "comment": {
                "type": "string",
                "example": "Check the assigment spec for more info"
              }
            }
          }
        }
      }
    },
    "PreRequisite": {
      "properties": {
        "preReqId": {
          "type": "integer",
          "example": 1
        },
        "topicId": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "Topic": {
      "properties": {
        "_id": {
          "type": "integer",
          "uniqueItems": true
        },
        "name": {
          "type": "string",
          "example": "Sorting"
        },
        "courseMaterials": {
          "type": "array",
          "items": {
            "type": "files",
            "example": "lecture3 - bubbleSort.mp4"
          }
        },
        "topicGroups":{
          "type": "array",
          "items": {
            "type": "object",
            "example": "Algorithm"
          }
        },
        "preRequisites": {
          "type": "array",
          "items": {
            "type": "topic",
            "example": "C++ Basics"
          }
        }
      }
    },
    "TopicGroup": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Algorithms"
        },
        "topic_code": {
          "type": "string",
          "example": "COMP3821"
        },
        "course_outline": {
          "type": "file",
          "example": "course_outline.pdf"
        }
      }
    },
    "GetAllTopics": {
      "properties": {
        "topics": {
          "type": "array",
          "description": "List of all topics",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "name": {
                "type": "string",
                "example": "Sorting"
              },
              "courseMaterials": {
                "type": "array",
                "items": {
                  "type": "files",
                  "example": "lecture3 - bubbleSort.mp4"
                }
              }
            }
          }
        }
      }
    },
    "GetAllTopicGroups": {
      "properties": {
        "TopicGroups": {
          "type": "array",
          "description": "List of all topic groups",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "name": {
                "type": "string",
                "example": "Algorithms"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 0
                    },
                    "topic_group_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Arrays"
                    }
                  }
                }
              },
              "tutorialList": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 0
                    },
                    "tutor_id": {
                      "type": "integer",
                      "example": 3
                    }
                    ,"topic_group_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "tutorial_code": {
                      "type": "string",
                      "example": "W82A1"
                    },
                    "timeslot": {
                      "type": "string",
                      "example": "10:00-11:00"
                    },
                    "curr_capacity": {
                      "type": "integer",
                      "example": 0
                    },
                    "max_capacity": {
                      "type": "integer",
                      "example": 30
                    }
                  }
                }
              },
              "courseOutline": {
                "type": "file",
                "example": "course_outline.pdf"
              }
            }
          }
        }
      }
    },
    "GetPreRequisites": {
      "properties": {
        "topic": {
          "type": "string",
          "example": "Sorting"
        },
        "preRequisites": {
          "type": "array",
          "description": "List of pre-requisites for topic",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "name": {
                "type": "string",
                "example": "C++ Basics"
              }
            }
          }
        }
      }
    },
    "GetAllForumTags": {
      "properties": {
        "tags": {
          "type": "array",
          "description": "List of forum tags",
          "items": {
            "type": "object",
            "properties": {
              "tag_id": {
                "type": "integer",
                "example": 1
              },
              "tagName": {
                "type": "string",
                "example": "Ass1"
              }
            }
          }
        }
      }
    },
    "GetAllForumPosts": {
      "properties": {
        "forumPosts": {
          "type": "array",
          "description": "List of all forum posts",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "title": {
                "type": "string",
                "example": "How to start Assignment 1"
              },
              "author": {
                "type": "string",
                "example": "John Smith"
              },
              "publishedDate": {
                "type": "dateTime",
                "example": "Wed Mar 25 2015 11:00:00"
              },
              "description": {
                "type": "string",
                "example": "Lorem ipsum ipsum ipsum ipsum ipsum"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "integer",
                      "uniqueItems": true
                    },
                    "name": {
                      "type": "string",
                      "example": "Ass1"
                    }
                  }
                }
              },
              "replies": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "integer",
                      "uniqueItems": true
                    },
                    "author": {
                      "type": "string",
                      "example": "Jessica Smith"
                    },
                    "publishedDate": {
                      "type": "dateTime",
                      "example": "Wed Mar 25 2015 11:23:05"
                    },
                    "reply": {
                      "type": "string",
                      "example": "Lorem lorem lorem lorem lorem lorem lorem"
                    }
                  }
                }
              },
              "comments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "integer",
                      "uniqueItems": true
                    },
                    "author": {
                      "type": "string",
                      "example": "Harold Jenkins"
                    },
                    "publishedDate": {
                      "type": "dateTime",
                      "example": "Wed Mar 25 2015 11:56:34"
                    },
                    "comment": {
                      "type": "string",
                      "example": "Check the assigment spec for more info"
                    }
                  }
                }
              },
              "isPinned": {
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      }
    },
    "PostForum": {
      "properties": {
        "title": {
          "type": "string",
          "example": "Final exam marks release date?"
        },
        "user_id": {
          "type": "integer",
          "example": 0
        },
        "publishedDate": {
          "type": "dateTime",
          "example":"Wed Mar 30 2016 08:20:15"
        },
        "description": {
          "type": "string",
          "example": "When do the final marks get released?"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tag_id": {
                "type": "integer",
                "example": 1
              },
              "tag": {
                "type": "string",
                "example": "FinalExam"
              }
            }
          }
        }
      }
    },
    "PostReply": {
      "properties": {
        "user_id": {
          "type": "integer",
          "example": 1
        },
        "published_date": {
          "type": "dateTime",
          "example": "2016-06-22 19:10:25-07"
        },
        "reply": {
          "type": "string",
          "example": "The final exam marks have already been released"
        }
      }
    },
    "PutReply": {
      "properties": {
        "reply": {
          "type": "string",
          "example": "The final exam marks have already been released"
        }
      }
    },
    "PostComment": {
      "properties": {
        "user_id": {
          "type": "integer",
          "example": 1
        },
        "published_date": {
          "type": "dateTime",
          "example": "2016-06-27 09:25:25-07"
        },
        "comment": {
          "type": "string",
          "example": "The final exam hasn't happened yet"
        }
      }
    },
    "User": {
      "properties": {
        "_id": {
          "type": "integer",
          "uniqueItems": true
        },
        "user_name": {
          "type": "string",
          "example": "John Smitty"
        },
        "zid": {
          "type": "string",
          "example": "z5123842"
        },
        "enrolledCourses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "C++ Programming"
              },
              "topic_code": {
                "type": "string",
                "example": "COMP5661"
              },
              "course_outline": {
                "type": "string",
                "example": "Course_outline.pdf"
              }
            }
          }
        }
      }
    },
    "GetAllAnnouncements": {
      "properties": {
        "announcements": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "announcementId": {
                "type": "integer",
                "uniqueItems": true
              },
              "author": {
                "type": "string",
                "example": "Mark Saylor"
              },
              "postDate": {
                "type": "dateTime",
                "example":"Wed Jun 30 2016 08:20:15"
              },
              "description": {
                "type": "string",
                "example": "All tutorials will be online"
              },
              "externalFiles": {
                "type": "file",
                "example": "dog.img"
              },
              "comments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "commentId": {
                      "type": "integer",
                      "uniqueItems": true
                    },
                    "author": {
                      "type": "string",
                      "example": "Harold Jenkins"
                    },
                    "publishedDate": {
                      "type": "dateTime",
                      "example": "Wed Mar 25 2015 11:56:34"
                    },
                    "comment": {
                      "type": "string",
                      "example": "Awesome"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "GetAllLevels": {
      "properties": {
        "levels": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "List of levels",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "title": {
                "type": "string",
                "example": "Level"
              },
              "topicGroupId": {
                "type": "integer",
                "uniqueItems": true
              },
              "levelType": {
                "type": "string"
              },
              "availableFrom": {
                "type": "dateTime",
                "example":"Wed Jun 30 2016 08:20:15"
              },
              "questionNumbers": {
                "type": "integer",
                "example": 3
              },
              "estimatedTimeRequired": {
                "type": "integer",
                "example": 15
              }
            }
          }
        }
      }
    },
    "GetAllLevelQuestions": {
      "properties": {
        "levelQuestions": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "List of questions for level",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "title": {
                "type": "string",
                "example": "What is the day today?"
              },
              "questionType": {
                "type": "string",
                "example": "Multiple Choice"
              },
              "potentialAnswers": {
                "type": "text",
                "example": "Monday"
              },
              "correctAnswer": {
                "type": "string",
                "example": "Friday"
              },
              "availableFrom": {
                "type": "dateTime",
                "example": "Wed Jun 30 2016 08:20:15"
              },
              "mediaLink": {
                "type": "string",
                "example": "123.png"
              },
              "estimatedTimeRequired": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      }
    },
    "GetAllQuestions": {
      "properties": {
        "questions": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "List of questions",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "title": {
                "type": "string",
                "example": "What is the day today?"
              },
              "questionType": {
                "type": "string",
                "example": "Multiple Choice"
              },
              "potentialAnswers": {
                "type": "text",
                "example": "Monday"
              },
              "correctAnswer": {
                "type": "string",
                "example": "Friday"
              },
              "availableFrom": {
                "type": "dateTime",
                "example": "Wed Jun 30 2016 08:20:15"
              },
              "numberOfAnswers": {
                "type": "integer",
                "example": 4
              },
              "mediaLink": {
                "type": "string",
                "example": "123.png"
              },
              "estimatedTimeRequired": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      }
    },
    "PutComment": {
      "properties": {
        "comment": {
          "type": "string",
          "example": "New comment description"
        }
      }
    },
    "PutLevel": {
      "properties": {
        "title": {
          "type": "string",
          "example": "Level"
        },
        "topicGroupId": {
          "type": "integer",
          "uniqueItems": true
        },
        "levelType": {
          "type": "string"
        },
        "availableFrom": {
          "type": "dateTime",
          "example":"2016-06-22 19:10:25-07"
        },
        "questionNumbers": {
          "type": "integer",
          "example": 3
        },
        "estimatedTimeRequired": {
          "type": "integer",
          "example": 15
        }
      }
    },
    "Level": {
      "properties": {
        "_id": {
          "type": "integer",
          "uniqueItems": true
        },
        "title": {
          "type": "string",
          "example": "Level"
        },
        "topicGroupId": {
          "type": "integer",
          "uniqueItems": true
        },
        "levelType": {
          "type": "string"
        },
        "availableFrom": {
          "type": "dateTime",
          "example":"2016-06-22 19:10:25-07"
        },
        "questionNumbers": {
          "type": "integer",
          "example": 3
        },
        "estimatedTimeRequired": {
          "type": "integer",
          "example": 15
        }
      }
    },
    "Question": {
      "properties": {
        "title": {
          "type": "string",
          "example": "What is the day today?"
        },
        "questionType": {
          "type": "string",
          "example": "mpc"
        },
        "potentialAnswers": {
          "type": "text",
          "example": "Monday"
        },
        "correctAnswer": {
          "type": "string",
          "example": "Friday"
        },
        "availableFrom": {
          "type": "dateTime",
          "example": "2016-06-22 19:10:25-07"
        },
        "numberOfAnswers": {
          "type": "integer",
          "example": 4
        },
        "mediaLink": {
          "type": "string",
          "example": "123.png"
        },
        "estimatedTimeRequired": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "PostQuiz": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Mid Sem Quiz"
        },
        "dueDate": {
          "type": "dateTime",
          "example": "2016-06-22 19:10:25-07"
        },
        "timeGiven": {
          "type": "integer",
          "example": 30
        }
      }
    },
    "Quiz": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Mid Sem Quiz"
        },
        "dueDate": {
          "type": "dateTime",
          "example": "2016-06-22 19:10:25-07"
        },
        "timeGiven": {
          "type": "integer",
          "example": 30
        }
      }
    },
    "QuizQuestion": {
      "properties": {
        "_id": {
          "type": "integer",
          "uniqueItems": true
        },
        "quizId": {
          "type": "integer",
          "uniqueItems": true
        },
        "question_bank_id": {
          "type": "integer",
          "example": 1
        },
        "quizType": {
          "type": "string",
          "example": "shortAnswer"
        },
        "marksAwarded": {
          "type": "integer",
          "example": 2
        },
        "topicId": {
          "type": "integer",
          "example": 3
        }
      }
    },
    "PutQuizQuestionAnswer": {
      "properties": {
        "isCorrectAnswer": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string",
          "example": "2 + 2 = 4"
        }
      }
    },
    "PostQuizQuestionAnswer": {
      "properties": {
        "quizId": {
          "type": "integer",
          "example": 2
        },
        "questionId": {
          "type": "integer",
          "example": 4
        },
        "isCorrectAnswer": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string",
          "example": "2 + 2 = 4"
        }
      }
    },
    "QuizQuestionAnswer": {
      "properties": {
        "_id": {
          "type": "integer",
          "example": 3
        },
        "quizId": {
          "type": "integer",
          "example": 2
        },
        "questionId": {
          "type": "integer",
          "example": 4
        },
        "isCorrectAnswer": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string",
          "example": "2 + 2 = 4"
        }
      }
    },
    "QuizStudentAnswer": {
      "properties": {
        "studentId": {
          "type": "integer",
          "example": 1
        },
        "quizId": {
          "type": "integer",
          "example": 2
        },
        "questionId": {
          "type": "integer",
          "example": 5
        },
        "answerSelectedId": {
          "type": "integer",
          "example": 3
        }
      }
    },
    "QuestionBank": {
      "properties": {
        "_id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Question Bank 1"
        }
      }
    },
    "GetAnswerCount": {
      "properties": {
        "QuizQuestionAnswer": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "quiz_id": {
                "type": "integer",
                "example": 1
              },
              "question_id": {
                "type": "integer",
                "example": 1
              },
              "is_correct_answer": {
                "type": "boolean",
                "example": true
              },
              "description": {
                "type": "string",
                "example": "5 x 5 = 12"
              },
              "answer_count": {
                "type": "integer",
                "example": 30
              }
            }
          }
        }
      }
    },
    "GetStudentAnswer": {
      "properties": {
        "studentAnswers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "studentId": {
                "type": "string",
                "example": "z2103091"
              },
              "quizId": {
                "type": "integer",
                "example": 2
              },
              "questionId": {
                "type": "integer",
                "example": 5
              },
              "answerSelectedId": {
                "type": "integer",
                "example": 3
              }
            }
          }
        }
      }
    },
    "GetQuestionBankQuestions": {
      "properties": {
        "questionBankQuestions": {
          "type": "array",
          "questionBankName": {
            "type": "string",
            "example": "Question Bank 1"
          },
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "uniqueItems": true
              },
              "quizId": {
                "type": "integer",
                "uniqueItems": true
              },
              "quizType": {
                "type": "string",
                "example": "shortAnswer"
              },
              "marksAwarded": {
                "type": "integer",
                "example": 2
              },
              "topicId": {
                "type": "integer",
                "example": 3
              }
            }
          }
        }
      }
    },
    "400": {
      "description": "Bad Input",
      "properties": {
          "error": {
              "type": "string",
              "description": "Error message returned from server",
              "example": "Invalid input"
          }
      }
   },
    "403": {
      "description": "Forbidden",
      "properties": {
          "error": {
              "type": "string",
              "description": "Error message returned from server",
              "example": "Invalid Token"
          }
      }
    }
  }
}